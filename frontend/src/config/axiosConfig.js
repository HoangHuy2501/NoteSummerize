import axios from 'axios';
import { toast } from 'sonner';
import { getAuthToken, removeAuthToken } from '../utils/authUtils';
// import { refreshToken } from '../services/tokenRefresher';

// L·∫•y BASE_URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c d√πng URL dev
const BASE_URL = import.meta.env.VITE_HTTP_API;

// Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i refresh token
let isRefreshingToken = false;
let failedQueue = [];

// X·ª≠ l√Ω c√°c request ƒëang ch·ªù
const processQueue = (error, token = null) => {
   failedQueue.forEach(prom => {
      if (error) {
         prom.reject(error);
      } else {
         prom.resolve(token);
      }
   });
   failedQueue = [];
};

// H√†m x·ª≠ l√Ω logout v√† th√¥ng b√°o
const handleSessionExpired = (message = 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.') => {
   removeAuthToken();
   // D·ª´ng t·∫•t c·∫£ c√°c request ƒëang ch·ªù
   processQueue(new Error('Session expired'), null);
   // Hi·ªÉn th·ªã th√¥ng b√°o
   toast.error(message, {
      duration: 4000,
   });
   // Redirect sau 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o user th·∫•y th√¥ng b√°o
   setTimeout(() => {
      window.location.href = '/login';
   }, 1000);
};

const axiosInstance = axios.create({
   baseURL: BASE_URL,
   timeout: 20000,
   headers: {
      'Content-Type': 'application/json',
   },
});

// Request interceptor
axiosInstance.interceptors.request.use(
   (config) => {
      const token = getAuthToken();
      if (token) {
         config.headers.Authorization = `Bearer ${token}`;
      }

      // X·ª≠ l√Ω FormData
      if (config.data instanceof FormData) {
         delete config.headers['Content-Type'];
      }

      return config;
   },
   (error) => {
      return Promise.reject(error);
   }
);

// Response interceptor
axiosInstance.interceptors.response.use(
   (response) => {
      return response;
   },
   async (error) => {
      const originalRequest = error.config;

      // Ki·ªÉm tra response t·ª´ server
      const errorResponse = error.response?.data;

      // Ki·ªÉm tra n·∫øu l√† l·ªói 401 v√† ch∆∞a th·ª≠ refresh token
      if (error.response?.status === 401 && !originalRequest._retry) {

         // Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p refresh token h·∫øt h·∫°n
         if (originalRequest.url === '/auth/refresh-token' ||
            errorResponse?.message?.toLowerCase().includes('refresh token expired') ||
            errorResponse?.message?.toLowerCase().includes('invalid refresh token')) {

            console.log('üîí Refresh token ƒë√£ h·∫øt h·∫°n:', errorResponse?.message);
            handleSessionExpired('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            return Promise.reject(error);
         }

         if (isRefreshingToken) {
            // N·∫øu ƒëang refresh token, th√™m request v√†o queue
            return new Promise((resolve, reject) => {
               failedQueue.push({ resolve, reject });
            })
               .then(token => {
                  originalRequest.headers.Authorization = `Bearer ${token}`;
                  return axiosInstance(originalRequest);
               })
               .catch(err => {
                  return Promise.reject(err);
               });
         }

         originalRequest._retry = true;
         isRefreshingToken = true;

         // try {
         //    // Th·ª≠ refresh token
         //    const result = await refreshToken();
         //    if (result.success) {
         //       const { accessToken } = result;
         //       // C·∫≠p nh·∫≠t token cho request hi·ªán t·∫°i
         //       originalRequest.headers.Authorization = `Bearer ${accessToken}`;
         //       // X·ª≠ l√Ω c√°c request ƒëang ch·ªù
         //       processQueue(null, accessToken);
         //       return axiosInstance(originalRequest);
         //    } else {
         //       // Refresh token th·∫•t b·∫°i
         //       console.log('‚ùå Refresh token th·∫•t b·∫°i:', result.message);
         //       handleSessionExpired('Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
         //       return Promise.reject(error);
         //    }
         // } catch (refreshError) {
         //    console.error('‚ùå L·ªói khi refresh token:', refreshError);
         //    handleSessionExpired('Kh√¥ng th·ªÉ l√†m m·ªõi phi√™n ƒëƒÉng nh·∫≠p! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
         //    return Promise.reject(refreshError);
         // } finally {
         //    isRefreshingToken = false;
         // }
      }

      // X·ª≠ l√Ω c√°c l·ªói kh√°c
      if (error.response?.status === 403) {
         toast.error('B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y!', {
            duration: 3000,
         });
      }

      return Promise.reject(error);
   }
);

export default axiosInstance;
